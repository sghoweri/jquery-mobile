@import "compass/css3";
@import "compass/support";


//Defines path of retina and non-retina icons to be sprited
//$sprites: sprite-map("icons/raster-icons/1x/*.png", $spacing: 2px);

//$sprites2x: sprite-map("icons/raster-icons/2x/*.png", $spacing: 2px);


//Mixin for including retina and non-retina background images that should be sprited. Optional parameters allow you to include an SVG image as well, define sprite padding, and include hover / active background image states.

@mixin retina-sprite($name, $svg: true, $hover: false, $active: false) {
  @include _retina-sprite($name, $svg, $sprites, $sprites2x, $hover, $active);
}

// The general purpose retina sprite mixin.
  //
  //    @include retina-sprite(name, $spritemap1, $spritemap2)
  //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
  //
  //    If `dimensions` is true, then width/height will also be set.
  //
  //    if `pad` is non-zero, then that's how much padding the element will have (requires
  //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
  //
@mixin _retina-sprite($name, $svg, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {  
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
    
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
    }
  }
  
  @if $pad > 0 {
    padding: $pad;
  }
  
	@if $svg == true {
		@include svg { 
			background-image: image-url('icons/vectors/' + $name + '.svg'); 
			background-size: auto 100%;
			background-position: center center;
		}
		
	}

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {
    & {
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width
      
      @if $hover == true {
        $name_hover: $name + _hover;    // create myButton_hover and assign it
        &:hover{
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) nth($pos, 2) / 2;
        }
      }
      @if $active == true {
        $name_active: $name + _active;    // create myButton_active and assign it
        &:active{
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) nth($pos, 2) / 2;
        }
      }
    }
  }
}


@mixin svg{ .svg & { @content } }





//Mixin to easily add a device orientation media query. Ex. @include orientation(portrait){display: none;}
@mixin orientation($point) {
	@if $point == landscape {
		@media only screen and (orientation: landscape){
			@content;
		}
	}@else if $point == portrait{
		@media only screen and (orientation: portrait){
			@content;
		}
	}
}




//Mixin to easily include structural bg images that shouldn't be converted into sprites. Also adds a retina media query to reference a higher resolution version of the img.
@mixin structure-img($filename, $extension: '.jpg') {

	@include background(image-url("structure/1x/" + $filename + $extension));
	@include background-size(auto);

	@media (-webkit-min-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {

		@include background(image-url("structure/2x/" + $filename + $extension));
		@include background-size(50% auto);
	}
}




//Mixin to easily convert font-size and optionally line height into rems with a px fallback. Ex. @include font-size(12, 20);
@mixin font-size($sizeValue: 1.6, $line: $sizeValue * 1.5, $important: 'not-important'){
	
	@if (($line % 1) != 0){
		$line: $line * $sizeValue;
	}

    @if $important == 'not-important'{
        font-size: ($sizeValue * 1) + px;
        line-height: ($line * 1) + px;
        font-size: ($sizeValue / 10) + rem;
        line-height: ($line / 10) + rem;
    }@else{
        font-size: ($sizeValue * 1) + px !important;
        line-height: ($line * 1) + px !important;
        font-size: ($sizeValue / 10) + rem !important;
        line-height: ($line / 10) + rem !important;
    }
}





// ---------------------------------------------------------------------------------------------------------------------
//
//  Author: Rafal Bromirski
//  www: http://paranoida.com/
//  twitter: http://twitter.com/paranoida
//  dribbble: http://dribbble.com/paranoida
//
//  Licensed under a MIT License
//
// ---------------------------------------------------------------------------------------------------------------------
//
// Requirements:
//   Sass 3.2.0+
//
//  Version:
//   1.0 ÃŸ                          // developed on 20/08/2012
//
// Variables:
//   $units: 1px;                   // default units for 'screen' mixins - it must include a digit!
//
// Mixins:
//   @ min-screen(width)            // 'Mobile First' approach
//   @ screen(width)                // 'Mobile Last' approach
//   @ screen(min-width, max-width) // extra stuff
//   ---
//   @ ipad                         // iPad & iPad with retina, landscape & portrait
//   @ ipad-landscape               // iPad & iPad with retina, only landscape
//   @ ipad-portrait                // iPad & iPad with retina, only portrait
//   ---
//   @ ipad-retina                  // iPad with retina, landscape & portrait
//   @ ipad-retina-landscape        // iPad with retina, only landscape
//   @ ipad-retina-portrait         // iPad with retina, only portrait
//   ---
//   @ iphone                       // iPhone & iPhone with retina, landscape & portrait
//   @ iphone-landscape             // iPhone & iPhone with retina, only landscape
//   @ iphone-portrait              // iPhone & iPhone with retina, only portrait
//   ---
//   @ iphone-retina                // iPhone with retina, landscape & portrait
//   @ iphone-retina-landscape      // iPhone with retina, only landscape
//   @ iphone-retina-portrait       // iPhone with retina, only portrait
//   ---
//   @ retina                       // devices with retina
//
// ---------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------------------
// --- screen ----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

$units: 1px;

@mixin screen($res-first, $res-last: $res-first){
  @if $res-first == $res-last {
    @media screen and ( max-width: if(unitless($res-first), $res-first*$units, $res-first) ) {
      @content;
    }
  } @else if $res-first < $res-last {
    @media screen and ( min-width: if(unitless($res-first), $res-first*$units, $res-first) ) and ( max-width: if(unitless($res-last), $res-last*$units, $res-last) ) {
      @content;
    }
  }

}

@mixin min-screen($res) {
  @media screen and ( min-width: if(unitless($res), $res*$units, $res) ) {
    @content;
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// --- ipad ------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

@mixin ipad-portrait {
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation:portrait) {
    @content;
  }
}

@mixin ipad-landscape {
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation:landscape) {
    @content;
  }
}

@mixin ipad {
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px) {
    @content;
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// --- ipad-retina -----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

@mixin ipad-retina-portrait
{
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px)
  and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 1.5)
  {
    @content;
  }
}

@mixin ipad-retina-landscape {
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px)
  and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 1.5) {
    @content;
  }
}

@mixin ipad-retina {
  @media screen and (min-device-width: 768px) and (max-device-width: 1024px)
  and (-webkit-min-device-pixel-ratio: 1.5) {
    @content;
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// --- iphone ----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

@mixin iphone-portrait {
  @media screen and (max-device-width: 320px) and (orientation:portrait) {
    @content;
  }
}

@mixin iphone-landscape {
  @media screen and (max-device-width: 480px) and (orientation:landscape) {
    @content;
  }
}

@mixin iphone {
  @media screen and (max-device-width: 480px) {
    @content;
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// --- iphone-retina ---------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

@mixin iphone-retina-portrait
{
  @media screen and (max-device-width: 320px)
  and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 1.5)
  {
    @content;
  }
}

@mixin iphone-retina-landscape
{
  @media screen and (max-device-width: 480px)
  and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 1.5)
  {
    @content;
  }
}

@mixin iphone-retina {
  @media screen and (max-device-width: 480px)
  and (-webkit-min-device-pixel-ratio: 1.5) {
    @content;
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// --- retina ----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

@mixin retina {
  @media screen and (-webkit-min-device-pixel-ratio: 1.5) {
    @content;
  }
}





//Mixin for the user-select rule; Checks if device support is enabled before exporting specific vendor prefix.
@mixin user-select($value) {
	
	@if $experimental-support-for-mozilla {
		-moz-user-select: $value;
	}
	
	@if $experimental-support-for-webkit {
		-webkit-user-select: $value;
	}
	
	@if $experimental-support-for-microsoft {
		-ms-user-select: $value;
	}
}




//Workaround mixin for Compass tripping on the -webkit-outer-spin-button pseduo-element
@mixin outer-spin-button-margin($value){
	::-webkit-outer-spin-button{
		margin: $value;
	}
}
  